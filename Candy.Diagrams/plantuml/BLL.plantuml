@startuml
' Set direction for the diagram
left to right direction

title Business Logic Layer (BLL)

' Include necessary elements from other layers for context
package "02. DAL (Interfaces Partial)" {
    interface IRepository<T> { }
    interface IBrandRepository { IBrandRepository <|-- IRepository<Models.Products.Brand> }
    interface ICategoryRepository { ICategoryRepository <|-- IRepository<Models.Products.Category> }
    interface ICandyRepository { ICandyRepository <|-- IRepository<Models.Products.Candy> }
    interface IUserRepository { IUserRepository <|-- IRepository<Models.User> }
    interface IOrderRepository { IOrderRepository <|-- IRepository<Models.Orders.Order> }
    interface IOrderItemRepository { IOrderItemRepository <|-- IRepository<Models.Orders.OrderItem> }
}

package "06. Cross-Cutting Concerns (Interfaces Partial)" {
    interface IJwtService { }
    interface ITaxService { }
}

package "03. BLL (Business Logic Layer)" {
    package Models.Products {
        class Brand { }
        class Category { }
        class Candy { }
    }
    package Models.Orders {
        class Order { }
        class OrderItem { }
    }
    package Models {
        class User { }
    }

    interface IBrandService {
        + IEnumerable<Models.Products.Brand> GetAll()
        + Models.Products.Brand Get(int id)
        + void Create(in Models.Products.Brand brand)
        + void Update(int id, in Models.Products.Brand brand)
        + void Remove(int id)
        + void Remove(in Models.Products.Brand brand)
    }

    interface ICategoryService {
        + IEnumerable<Models.Products.Category> GetAll()
        + Models.Products.Category Get(int id)
        + void Create(in Models.Products.Category category)
        + void Update(int id, in Models.Products.Category category)
        + void Remove(int id)
        + void Remove(in Models.Products.Category category)
    }

    interface ICandyService {
        + IEnumerable<Models.Products.Candy> GetAll()
        + Models.Products.Candy Get(int id)
        + void Create(in Models.Products.Candy product)
        + void Update(int id, in Models.Products.Candy product)
        + void Remove(int id)
        + void Remove(in Models.Products.Candy product)
        + IList<Models.Products.Candy> GetAll(in Models.Products.Brand Brand)
        + IList<Models.Products.Candy> GetAll(in Models.Products.Category category)
        + void IncrementStock(int productId, uint newStock)
        + void DecrementStock(int productId, uint quantity = 1)
        + decimal TaxFreePrice(in Models.Products.Candy product)
        + decimal TaxFreePrice(int id)
    }

    interface IUserService {
        + Models.User Register(in Models.User user)
        + Models.User Login(string username, string password)
        + Models.User GetUserById(int id)
    }

    interface IOrderService {
        + void PlaceOrder(in Models.Orders.Order order)
        + IEnumerable<Models.Orders.Order> GetOrdersByUserId(int userId)
        + void UpdateOrderStatus(int orderId, string status)
    }

    class BrandService {
        + BrandService(IBrandRepository brandRepository)
    }
    BrandService .up.|> IBrandService
    BrandService ..> IBrandRepository : uses

    class CategoryService {
        + CategoryService(ICategoryRepository categoryRepository)
    }
    CategoryService .up.|> ICategoryService
    CategoryService ..> ICategoryRepository : uses

    class CandyService {
        + CandyService(ICandyRepository candyRepository, IBrandRepository brandRepository, ICategoryRepository categoryRepository, ITaxService taxService)
    }
    CandyService .up.|> ICandyService
    CandyService ..> ICandyRepository : uses
    CandyService ..> IBrandRepository : uses
    CandyService ..> ICategoryRepository : uses
    CandyService ..> ITaxService : uses

    class UserService {
        + UserService(IUserRepository userRepository, IJwtService jwtService)
    }
    UserService .up.|> IUserService
    UserService ..> IUserRepository : uses
    UserService ..> IJwtService : uses

    class OrderService {
        + OrderService(IOrderRepository orderRepository, IOrderItemRepository orderItemRepository, ICandyRepository candyRepository, IUserRepository userRepository)
    }
    OrderService .up.|> IOrderService
    OrderService ..> IOrderRepository : uses
    OrderService ..> IOrderItemRepository : uses
    OrderService ..> ICandyRepository : uses
    OrderService ..> IUserRepository : uses

    Models.Orders.Order "*" --> "1" Models.Orders.OrderItem : contains
    Models.Orders.OrderItem --> Models.Products.Candy : relates to
    Models.Orders.Order --> Models.User : placed by

}

@enduml